globals:
  - id: user_brightness
    type: float
    restore_value: no
  - id: user_red
    type: float
    restore_value: no
  - id: user_green
    type: float
    restore_value: no
  - id: user_blue
    type: float
    restore_value: no
# Hook up the button
binary_sensor:
  - platform: gpio
    name: Switch
    pin: GPIO0
    on_press:
      then:
        - switch.toggle: relay

switch:
  - platform: gpio
    id: relay
    name: ${device_name}
    pin: GPIO25
    on_turn_on:
      then:
        # don't save user_color to the transition color
        - if:
            condition: 
              lambda: |-
                return !(id(color).remote_values.get_red() == 0 &&
                        id(color).remote_values.get_green() == 1 &&
                        id(color).remote_values.get_blue() - 0.2 < 0.01) &&
                       !(id(color).remote_values.get_red() == 1 &&
                        id(color).remote_values.get_green() == 0 &&
                        id(color).remote_values.get_blue() - 0.2 < 0.01);
            then:
              # save the previous color
              - globals.set:
                  id: user_brightness
                  value: !lambda 'return id(color).remote_values.get_brightness();'
              - globals.set:
                  id: user_red
                  value: !lambda 'return id(color).remote_values.get_red();'
              - globals.set:
                  id: user_green
                  value: !lambda 'return id(color).remote_values.get_green();'
              - globals.set:
                  id: user_blue
                  value: !lambda 'return id(color).remote_values.get_blue();'
        # set color
        - light.turn_on:
            id: color
            #flash_length: 2000ms
            transition_length: 600ms
            brightness: 0.7
            red: 0
            green: 1
            blue: 0.2
        - delay: 2s
        # restore the previous color, but only if it hasn't changed
        - if:
            condition: 
              lambda: |-
                return (id(color).remote_values.get_red() == 0 &&
                        id(color).remote_values.get_green() == 1);
            then:
              - light.turn_on:
                  id: color
                  #flash_length: 2000ms
                  transition_length: 1500ms
                  brightness: !lambda 'return id(user_brightness);'
                  red: !lambda 'return id(user_red);'
                  green: !lambda 'return id(user_green);'
                  blue: !lambda 'return id(user_blue);'
    on_turn_off:
      then:
        # don't save user_color to the transition color
        - if:
            condition: 
              lambda: |-
                return !(id(color).remote_values.get_red() == 0 &&
                        id(color).remote_values.get_green() == 1 &&
                        id(color).remote_values.get_blue() - 0.2 < 0.01) &&
                       !(id(color).remote_values.get_red() == 1 &&
                        id(color).remote_values.get_green() == 0 &&
                        id(color).remote_values.get_blue() - 0.2 < 0.01);
            then:
              # save the previous color
              - globals.set:
                  id: user_brightness
                  value: !lambda 'return id(color).remote_values.get_brightness();'
              - globals.set:
                  id: user_red
                  value: !lambda 'return id(color).remote_values.get_red();'
              - globals.set:
                  id: user_green
                  value: !lambda 'return id(color).remote_values.get_green();'
              - globals.set:
                  id: user_blue
                  value: !lambda 'return id(color).remote_values.get_blue();'
        # set color
        - light.turn_on:
            id: color
            #flash_length: 2000ms
            transition_length: 400ms
            brightness: 0.6
            red: 1
            green: 0
            blue: 0.2
        - delay: 2s
        # restore the previous color, but only if it hasn't changed
        - if:
            condition: 
              lambda: |-
                return (id(color).remote_values.get_red() == 1 &&
                        id(color).remote_values.get_green() == 0);
            then:
              - light.turn_on:
                  id: color
                  #flash_length: 2000ms
                  transition_length: 1500ms
                  brightness: !lambda 'return id(user_brightness);'
                  red: !lambda 'return id(user_red);'
                  green: !lambda 'return id(user_green);'
                  blue: !lambda 'return id(user_blue);'

output:
  - platform: ledc
    id: led_red
    pin:
      number: GPIO26
      inverted: True
      mode: OUTPUT_OPEN_DRAIN
  - platform: ledc
    id: led_green
    pin:
      number: GPIO27
      inverted: True
      mode: OUTPUT_OPEN_DRAIN
  - platform: ledc
    id: led_blue
    pin:
      number: GPIO14
      inverted: True
      mode: OUTPUT_OPEN_DRAIN

light:
  - platform: rgb
    id: color
    name: ${device_name}
    red: led_red
    green: led_green
    blue: led_blue
